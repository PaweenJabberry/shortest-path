import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class main
{
    public static int getRandomWithExclusion(Random rnd, int start, int end, List<Integer> exclude)
    {
        int random = start + rnd.nextInt(end - start + 1 - exclude.size());
        for (int ex : exclude) {
            if (random < ex) {
                break;
            }
            random++;
        }
        return random;
    }

    public static void main(String args[])
    {
        Path path = new Path();

        Generation gen1 = new Generation();

        CalculateSum cal = new CalculateSum();

        Random rand = new Random();

        int  n = 0;

        int[] sn1 = {0,50,65,45,30,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999}; //
        int[] sn2 = {50,0,60,999,999,62,27,999,999,999,999,999,999,999,999,999,999,999,999,999}; //
        int[] sn3 = {65,60,0,43,999,999,250,35,29,999,999,999,999,999,999,999,999,999,999,999}; //
        int[] sn4 = {45,999,43,0,90,999,999,999,17,40,15,999,999,999,999,999,999,999,999,999}; //
        int[] sn5 = {30,999,999,90,0,999,999,999,999,999,230,999,999,999,999,999,999,999,999,999}; // 7 8 9 10
        int[] sn6 = {999,62,999,999,999,0,25,999,999,999,999,136,999,999,999,999,999,999,999,999}; // 7 8 9 10
        int[] sn7 = {999,27,250,999,999,25,0,32,30,999,999,58,220,999,999,999,999,999,999,999}; // 11 12 13 14 15
        int[] sn8 = {999,999,35,999,999,999,32,0,120,999,999,61,88,20,999,999,999,999,999,999}; // 11 12 13 14 15
        int[] sn9 = {999,999,29,17,999,999,30,120,0,61,999,999,999,150,50,999,999,999,999,999}; // 11 12 13 14 15
        int[] sn10 = {999,999,999,40,999,999,999,999,61,0,32,999,999,999,194,147,999,999,110,999}; // 11 12 13 14 15
        int[] sn11 = {999,999,999,15,230,999,999,999,999,32,0,999,999,999,999,130,999,999,999,999}; // 16 17 18 19 20 21
        int[] sn12 = {999,999,999,999,999,136,58,61,999,999,999,0,144,999,999,999,161,999,999,999}; // 16 17 18 19 20 21
        int[] sn13 = {999,999,999,999,999,999,999,88,999,999,999,144,0,24,999,999,71,54,999,999}; // 16 17 18 19 20 21
        int[] sn14 = {999,999,999,999,999,999,999,20,150,999,999,999,24,0,40,999,999,72,999,22}; // 16 17 18 19 20 21
        int[] sn15 = {999,999,999,999,999,999,999,999,60,194,999,999,999,40,0,77,999,999,14,220}; // 16 17 18 19 20 21
        int[] sn16 = {999,999,999,999,999,999,999,999,999,147,999,999,999,999,77,0,999,999,89,999}; // 22 23 24 25 26 27 28
        int[] sn17 = {999,999,999,999,999,999,999,999,999,999,999,161,71,999,999,999,0,26,999,999}; // 22 23 24 25 26 27 28
        int[] sn18 = {999,999,999,999,999,999,999,999,999,999,999,999,54,72,999,999,26,0,999,16}; // 22 23 24 25 26 27 28
        int[] sn19 = {999,999,999,999,999,999,999,999,999,110,999,999,999,999,14,89,999,999,0,72}; // 22 23 24 25 26 27 28
        int[] sn20 = {999,999,999,999,999,999,999,999,999,999,999,999,999,22,220,999,999,16,72,0}; // 22 23 24 25 26 27 28

        int[][] multi = new int[][]{
                {0,50,65,45,30,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999}, //1
                {50,0,60,999,999,62,27,999,999,999,999,999,999,999,999,999,999,999,999,999}, //2
                {65,60,0,43,999,999,250,35,29,999,999,999,999,999,999,999,999,999,999,999},  //3
                {45,999,43,0,90,999,999,999,17,40,15,999,999,999,999,999,999,999,999,999}, // 4
                {30,999,999,90,0,999,999,999,999,999,230,999,999,999,999,999,999,999,999,999}, // 5
                {999,62,999,999,999,0,25,999,999,999,999,136,999,999,999,999,999,999,999,999}, // 6
                {999,27,250,999,999,25,0,32,30,999,999,58,220,999,999,999,999,999,999,999}, // 7
                {999,999,35,999,999,999,32,0,120,999,999,61,88,20,999,999,999,999,999,999}, // 8
                {999,999,29,17,999,999,30,120,0,61,999,999,999,150,50,999,999,999,999,999}, // 9
                {999,999,999,40,999,999,999,999,61,0,32,999,999,999,194,147,999,999,110,999}, //10
                {999,999,999,15,230,999,999,999,999,32,0,999,999,999,999,130,999,999,999,999}, //11
                {999,999,999,999,999,136,58,61,999,999,999,0,144,999,999,999,161,999,999,999}, //12
                {999,999,999,999,999,999,999,88,999,999,999,144,0,24,999,999,71,54,999,999}, //13
                {999,999,999,999,999,999,999,20,150,999,999,999,24,0,40,999,999,72,999,22}, //14
                {999,999,999,999,999,999,999,999,60,194,999,999,999,40,0,77,999,999,14,220}, //15
                {999,999,999,999,999,999,999,999,999,147,999,999,999,999,77,0,999,999,89,999}, //16
                {999,999,999,999,999,999,999,999,999,999,999,161,71,999,999,999,0,26,999,999}, //17
                {999,999,999,999,999,999,999,999,999,999,999,999,54,72,999,999,26,0,999,16}, //18
                {999,999,999,999,999,999,999,999,999,110,999,999,999,999,14,89,999,999,0,72}, // 19
                {999,999,999,999,999,999,999,999,999,999,999,999,999,22,220,999,999,16,72,0} //20
        };

        int[] node1 = { 2, 3, 4, 5};
        int[] node2 = { 3, 6, 7};
        int[] node3 = { 2, 4, 7, 8, 9};
        int[] node4 = { 3, 5, 9, 10, 11};
        int[] node5 = { 4, 11};
        int[] node6 = { 7, 12};
        int[] node7 = { 6, 8, 9, 12, 13};
        int[] node8 = { 7, 9, 12, 13, 14};
        int[] node9 = { 7, 8, 10, 14, 15};
        int[] node10 = { 9, 11, 15, 16, 19};
        int[] node11 = { 10, 16};
        int[] node12 = { 13, 17};
        int[] node13 = { 12, 14, 17, 18};
        int[] node14 = { 13, 15, 18, 20};
        int[] node15 = { 14, 16, 19, 20};
        int[] node16 = { 15, 19};
        int[] node17 = {18};
        int[] node18 = {20};
        int[] node19 = {20};
        int[] node20 = {};

        int[][] multi2 = new int[][]{
                { 2, 3, 4, 5}, //1
                { 3, 6, 7}, //2
                { 2, 4, 7, 8, 9}, //3
                { 3, 5, 9, 10, 11}, //4
                { 4, 11}, //5
                { 7, 12}, //6
                { 6, 8, 9, 12, 13}, //7
                { 7, 9, 12, 13, 14}, //8
                { 7, 8, 10, 14, 15}, //9
                { 9, 11, 15, 16, 19}, //10
                { 10, 16}, //11
                { 13, 17}, //12
                { 12, 14, 17, 18}, //13
                { 13, 15, 18, 20}, //14
                { 14, 16, 19, 20}, //15
                { 15, 19}, //16
                {18}, //17
                {20}, //18
                {20}, //19
                {} //20
        };


        /*------------ Test create Generation--------------*/


        int size2;

        int currentNum = 0;

        int nextNum = 0;

        int sum2 = 0;

        int check = 0;

        int insideCheck = 0;

        int need = 0;


        List<Integer> num = new ArrayList<>();

        List<Integer> checkNum = new ArrayList<>();

        num.add(1);


        do
        {
            num = new ArrayList<>();
            num.add(1);
            currentNum = 0;
            do
            {
                //System.out.println("Current Array number : "+currentNum);
                size2 = multi2[currentNum].length - 1;
                //System.out.println("Size : "+size2);
                if(size2>0)
                {
                    n = getRandomWithExclusion(rand,0,size2,checkNum);
                }
                else
                {
                    n = 0;
                }
                //System.out.println("Number of random : "+n);
                nextNum = multi2[currentNum][n];
                //System.out.println("Next number : "+nextNum);
                for(int a :num)
                {
                    if(a==nextNum)
                    {
                        //System.out.println("-----------------Same number------------------");
                        check=1;
                        insideCheck = 0;
                        for(int c :checkNum)
                        {
                            if(c==n)
                            {
                                insideCheck = 1;
                            }
                            if(insideCheck==0)
                            {
                                checkNum.add(n);
                            }
                        }
                    }
                }
                if(check==0)
                {
                    num.add(nextNum);
                    currentNum = nextNum-1;
                    checkNum.clear();
                }
                check=0;
            } while (nextNum!=20);

            path = new Path();
            sum2 = cal.findSum(num,multi);
            path.setPathNode(num);
            path.setDuration(sum2);

            //System.out.println("-----------New-------------");
            //path.printPath();
            //System.out.println("SUM : "+path.getDuration());
            gen1.addPaths(path);
            need++;
        } while (need!=100);

        gen1.printAllPaths();
        gen1.sortPaths();
        System.out.println("\n---------------After Sorting--------------");
        gen1.printAllPaths();

    }
}
